from typing import Any, Union

_float_or_int = Union[float, int]
_Vector2d_or_tuple = Union[vector2d, tuple]


class scalar:
    has_limit: bool
    def __init__(self, value: _float_or_int, limits: tuple) -> None: ...
    @property
    def value(self) -> _float_or_int: ...
    @value.setter
    def value(self, o: _float_or_int) -> None: ...


class point2d:
    def __init__(self,
                 x: _float_or_int, y: _float_or_int,
                 x_lim: tuple = None, y_lim: tuple = None) -> None: ...

    @property
    def x(self) -> _float_or_int: ...
    @x.setter
    def x(self, o: _float_or_int) -> None: ...
    @property
    def y(self) -> _float_or_int: ...
    @y.setter
    def y(self, o: _float_or_int) -> None: ...
    @property
    def xy(self) -> tuple: ...
    @xy.setter
    def xy(self, o: object) -> None: ...


class vector2d:
    def __init__(self,
                 x: _float_or_int, y: _float_or_int,
                 x_lim: tuple = None, y_lim: tuple = None,
                 max_length=0, min_length=0) -> None: ...

    @property
    def x(self) -> _float_or_int: ...
    @x.setter
    def x(self, o: _float_or_int) -> None: ...
    @property
    def y(self) -> _float_or_int: ...
    @y.setter
    def y(self, o: _float_or_int) -> None: ...
    @property
    def head(self) -> tuple: ...
    @head.setter
    def head(self, o: tuple) -> None: ...
    @property
    def tail_x(self) -> _float_or_int: ...
    @tail_x.setter
    def tail_x(self, o: _float_or_int): ...
    @property
    def tail_y(self) -> _float_or_int: ...
    @tail_y.setter
    def tail_y(self, o: _float_or_int): ...
    @property
    def tail(self) -> tuple: ...
    @tail.setter
    def tail(self, o: tuple) -> None: ...
    def add(self, o: _float_or_int) -> None: ...
    def scale(self, o: _float_or_int) -> None: ...
    def set_x_ref(self, o: scalar) -> None: ...
    def set_y_ref(self, o: scalar) -> None: ...
    def set_head_ref(self, o: point2d) -> None: ...
    def set_tail_x_ref(self, o: scalar) -> None: ...
    def set_tail_y_ref(self, o: scalar) -> None: ...
    def set_tail_ref(self, o: point2d) -> None: ...
    def rotate(self, radians: _float_or_int) -> None: ...
    def length(self) -> float: ...
    def direction(self) -> float: ...
    def distance_to(self, vector: vector2d) -> float: ...
    def angle_between(self, vector: vector2d) -> float: ...
    def dot(self, vector: vector2d) -> float: ...

    def unit(self,
             scale: _float_or_int = 1,
             vector: bool = True) -> _Vector2d_or_tuple: ...

    def update(self) -> None: ...
