from Game.graphic.cartesian import CartesianPlane
from pygame.color import Color


class object_body:
    body_type: int
    body_id: int
    radius: float
    def __init__(self, id: int, body_type: int) -> None: ...
    def position(self) -> tuple: ...
    def speed(self) -> float: ...
    def step(self) -> None: ...
    def USR_work(self) -> None: ...
    def attach(self, o: object_body, follow_dir: bool = True) -> None: ...
    def detach(self) -> None: ...
    def rotate(self, angle: float) -> None: ...
    def scale(self, factor: float) -> None: ...
    def show(self, color: Color, show_vertex: bool = False) -> None: ...


class StaticBody(object_body):
    def __init__(self, body_id: int, plane: CartesianPlane) -> None: ...


class DynamicBody(object_body):
    def __init__(self, body_id: int, plane: CartesianPlane, max_speed: float = 1) -> None: ...
    def Accelerate(self, factor: float) -> None: ...


class DynamicPolygonBody(DynamicBody):
    def __init__(self, body_id: int, plane: CartesianPlane, size: tuple, max_speed: float = 1) -> None: ...


class DynamicRectangleBody(DynamicBody):
    def __init__(self, body_id: int, plane: CartesianPlane, size: tuple, max_speed: float = 1) -> None: ...


class DynamicTriangleBody(DynamicBody):
    def __init__(self, body_id: int, plane: CartesianPlane, sizes: list, max_speed: float = 1) -> None: ...


class StaticPolygonBody(StaticBody):
    def __init__(self, body_id: int, plane: CartesianPlane, size: tuple) -> None: ...


class StaticRectangleBody(StaticBody):
    def __init__(self, body_id: int, plane: CartesianPlane, size: tuple) -> None: ...


class StaticTriangleBody(StaticBody):
    def __init__(self, body_id: int, plane: CartesianPlane, sizes: list) -> None: ...
